#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# Description: Build Kernel using GitHub Actions
# Change from P3TERX
#

name: Debian Kernel Latest

on:
  workflow_dispatch:

env:
  UPLOAD_DIR: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest
    container: docker.io/qctt/kernelbuild:debian12

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Get Kernel Versions
      id: versions
      run: |
        github_tag=$(curl -s 'https://api.github.com/repos/gamesofts/debian-kernel/releases' | grep 'Debian_Kernel' | grep '_latest_bbr_' | head -n 1 | awk -F '"' '{print $4}' | awk -F '[/]' '{print $8}')
        github_ver=$(curl -s 'https://api.github.com/repos/gamesofts/debian-kernel/releases' | grep ${github_tag}  | grep 'deb' | grep 'headers' | awk -F '"' '{print $4}' | awk -F '[/]' '{print $9}' | awk -F '[-]' '{print $3}' | awk -F '[_]' '{print $1}')
        kernel_ver=$(curl -s https://www.kernel.org/ | grep ' <a href="https://cdn.kernel.org/pub/linux/kernel/' | head -n 1 | awk -F '[>]' '{print $2}' | awk -F '[<]' '{print $1}')
        echo "github_ver=$github_ver"
        echo "kernel_ver=$kernel_ver"
        if [ "$github_ver" = *"$kernel_ver"* ]; then
            echo "action_echo=enabled" >> $GITHUB_ENV
            echo "versions.status=fail" >> $GITHUB_ENV
        else
            echo "action_echo=enabled" >> $GITHUB_ENV
            echo "versions.status=success" >> $GITHUB_ENV
        fi
        echo ${{ env.versions.status }}

    - name: Update config
      id: update
      if: ${{ env.versions.status }} == 'success'
      working-directory: /workdir
      run: |
        sudo -E sed -i~orig -e 's/# deb-src/deb-src/' /etc/apt/sources.list   
        sudo -E apt-get -qq update
        sudo apt-get -qq install -y rpm2cpio 
        elrepo_c7_ver=$(curl -s 'https://elrepo.org/linux/kernel/el7/x86_64/RPMS/?C=N;O=D' | grep -oP 'kernel-ml-headers[^"]+' | head -n 1 | awk -F '-' '{print $4}')
        sudo wget https://elrepo.org/linux/kernel/el7/x86_64/RPMS/kernel-ml-$elrepo_c7_ver-1.el7.elrepo.x86_64.rpm
        sudo rpm2cpio kernel-ml-$elrepo_c7_ver-1.el7.elrepo.x86_64.rpm | cpio -divm
        echo "elrepo_config_version=$elrepo_c7_ver"
        
        cd /workdir/boot
        config=/workdir/boot/.config
        sudo mv config-*-1.el7.elrepo.x86_64 .config
        sudo sed -ri 's/.*CONFIG_TCP_CONG_BBR.*/CONFIG_TCP_CONG_BBR=y/' ${config}
        sudo sed -ri '/.*CONFIG_DEFAULT_BBR.*/i\CONFIG_DEFAULT_BBR=y' ${config}
        sudo sed -ri 's/.*CONFIG_DEFAULT_TCP_CONG.*/CONFIG_DEFAULT_TCP_CONG="bbr"/' ${config}
        sudo sed -ri 's/.*CONFIG_NET_SCH_FQ.*/CONFIG_NET_SCH_FQ=m/' ${config}
        sudo sed -ri 's/.*CONFIG_NET_SCH_DEFAULT.*/CONFIG_NET_SCH_DEFAULT=y/' ${config}
        sudo sed -ri '/.*CONFIG_DEFAULT_FQ.*/i\CONFIG_DEFAULT_FQ=y' ${config}
        sudo sed -ri '/.*CONFIG_DEFAULT_NET_SCH.*/i\CONFIG_DEFAULT_NET_SCH="fq"' ${config}
        sudo sed -ri '/CONFIG_XEN_BLKDEV_FRONTEND/s/=.+/=y/g' ${config}
        sudo sed -ri '/CONFIG_XEN_NETDEV_FRONTEND/s/=.+/=y/g' ${config}
        sudo sed -ri '/CONFIG_VIRTIO_BLK/s/=.+/=y/g' ${config}
        sudo sed -ri '/CONFIG_VIRTIO_NET/s/=.+/=y/g' ${config}
        sudo sed -ri '/CONFIG_TLS/s/=.+/=y/g' ${config}
        sudo sed -ri '/CONFIG_TLS_DEVICE/s/=.+/=y/g' ${config}
        sudo sed -ri '/.*CONFIG_DEFAULT_RENO.*/d' ${config}
        sudo sed -ri '/.*CONFIG_DEFAULT_CUBIC.*/d' ${config}
        sudo sed -ri '/.*CONFIG_NET_SCH_PIE.*/d' ${config}
        sudo sed -ri '/.*CONFIG_NET_SCH_FQ_PIE.*/d' ${config}
        sudo sed -ri '/.*CONFIG_DEFAULT_CODEL.*/d' ${config}
        sudo sed -ri '/.*CONFIG_DEFAULT_FQ_CODEL.*/d' ${config}
        sudo sed -ri '/.*CONFIG_DEFAULT_SFQ.*/d' ${config}
        sudo sed -ri '/.*CONFIG_DEFAULT_PFIFO_FAST.*/d' ${config}
        sudo sed -ri '/CONFIG_HAVE_ARCH_KCSAN*/c\# CONFIG_HAVE_ARCH_KCSAN is not set' ${config}
        sudo sed -ri '/CONFIG_DEBUG_INFO_NONE*/c\# CONFIG_DEBUG_INFO_NONE is not set' ${config}
        sudo sed -ri '/CONFIG_MODULE_SIG=y/c\# CONFIG_MODULE_SIG is not set' ${config}
        sudo sed -ri '/CONFIG_MODULE_SIG_ALL*/c\# CONFIG_MODULE_SIG_ALL is not set' ${config}
        sudo sed -ri '/CONFIG_DEBUG_INFO=*/c\# CONFIG_DEBUG_INFO is not set' ${config}
        sudo sed -ri '/CONFIG_DEBUG_INFO_NONE*/c\# CONFIG_DEBUG_INFO_NONE is not set' ${config}
        sudo sed -ri '/CONFIG_DEBUG_INFO_DWARF4*/c\# CONFIG_DEBUG_INFO_DWARF4 is not set' ${config}
        sudo sed -ri '/CONFIG_DEBUG_INFO_BTF*/c\# CONFIG_DEBUG_INFO_BTF is not set' ${config}
        sudo sed -ri '/CONFIG_DEBUG_INFO_DWARF5*/c\# CONFIG_DEBUG_INFO_DWARF5 is not set' ${config}
        sudo sed -ri '/CONFIG_MODULE_SIG_KEY_TYPE_RSA*/c\# CONFIG_MODULE_SIG_KEY_TYPE_RSA is not set' ${config}
        sudo sed -ri '/CONFIG_MODULE_SIG_KEY=*/c\CONFIG_MODULE_SIG_KEY=""' ${config}
        sudo sed -ri '/CONFIG_SYSTEM_TRUSTED_KEYS=*/c\CONFIG_SYSTEM_TRUSTED_KEYS=""' ${config}

    - name: Get Source Code
      if: ${{ env.versions.status }} == 'success'
      working-directory: /workdir
      run: |
        df -hT $PWD
        kernel_file=$(curl -s https://www.kernel.org/ | grep 'alt="Download"' | awk -F '"' '{print $2}')
        kernel_ver=$(curl -s https://www.kernel.org/ | grep ' <a href="https://cdn.kernel.org/pub/linux/kernel/' | head -n 1 | awk -F '[>]' '{print $2}' | awk -F '[<]' '{print $1}')
        wget -O kernel.tar.xz $kernel_file
        tar -Jxvf kernel.tar.xz -C /workdir && cd /workdir/linux-$kernel_ver
        echo "action_echo=enabled" >> $GITHUB_ENV
        echo "code.status=success" >> $GITHUB_ENV

    - name: Compile Kernel
      if: ${{ env.versions.status }} == 'success' && ${{ env.code.status }} == 'success'
      working-directory: /workdir
      run: |
        kernel_ver=$(curl -s https://www.kernel.org/ | grep ' <a href="https://cdn.kernel.org/pub/linux/kernel/' | head -n 1 | awk -F '[>]' '{print $2}' | awk -F '[<]' '{print $1}')
        cd linux-$kernel_ver
        mv /workdir/boot/.config .config
        sed -ri '/CONFIG_SYSTEM_TRUSTED_KEYS/s/=.+/=""/g' .config
        scripts/config --disable MODULE_SIG
        scripts/config --disable DEBUG_INFO
        scripts/config --disable DEBUG_INFO_BTF
        scripts/config --disable DEBUG_INFO_DWARF4
        scripts/config --disable DEBUG_INFO_DWARF5
        scripts/config --disable DEBUG_INFO_NONE
        scripts/config --disable SYSTEM_TRUSTED_KEYS
        scripts/config --disable SYSTEM_REVOCATION_KEYS
        echo -e "$(nproc) thread compile"
        sudo time make -j$(nproc) bindeb-pkg
        cd /workdir && mv *.deb /workdir/upload
        echo "action_echo=enabled" >> $GITHUB_ENV
        echo "compile.status=success" >> $GITHUB_ENV
        echo "FILE_DATE=Kernel_Debian_$kernel_ver_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Upload Artifacts
      uses: actions/upload-artifact@main
      if: ${{ env.compile.status }} == 'success' && ${{ env.UPLOAD_DIR }} == 'true'
      with:
        name: ${{ env.FILE_DATE }}
        path: /workdir/upload

    - name: Generate release tag
      id: tag
      if: ${{ env.UPLOAD_RELEASE }} == 'true' && ${{ env.compile }} = == 'success' && !cancelled()
      run: |
        kernel_ver=$(curl -s https://www.kernel.org/ | grep ' <a href="https://cdn.kernel.org/pub/linux/kernel/' | head -n 1 | awk -F '[>]' '{print $2}' | awk -F '[<]' '{print $1}')
        echo "action_echo=enabled" >> $GITHUB_ENV
        echo "release_tag=Debian_Kernel_${kernel_ver}_latest_bbr_$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_ENV
        touch release.txt
        echo "tag.status=success" >> $GITHUB_ENV

    - name: Upload Kernel to release
      uses: softprops/action-gh-release@v1
      if: ${{ env.tag.status }} == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
      with:
        tag_name: ${{ env.release_tag }}
        body_path: release.txt
        files: /workdir/upload/*

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        token: ${{ secrets.TOKEN }}
        repository: ${{ github.repository }}
        retain_days: 1
        keep_minimum_runs: 2
