name: Debian Kernel Latest

on:
  # schedule:
  #   - cron: "0 0 * * *"
  workflow_dispatch:

env:
  UPLOAD_DIR: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest
    container: docker.io/qctt/kernelbuild:debian12

    steps:
    - name: Get Kernel Versions
      id: versions
      run: |
        # 获取 GitHub 最新 release 版本
        github_ver=$(curl -s 'https://api.github.com/repos/gamesofts/debian-kernel/releases/latest' | grep 'Debian_Kernel' | grep '_latest_bbr_' | head -n 1 | awk -F '"' '{print $4}' | awk -F '[/]' '{print $8}' | awk -F '[_]' '{print $3}')
        
        # 获取 Kernel.org 最新稳定版
        kernel_ver=$(curl -s https://www.kernel.org/ | grep ' <a href="https://cdn.kernel.org/pub/linux/kernel/' | head -n 1 | awk -F '[>]' '{print $2}' | awk -F '[<]' '{print $1}'
        major_ver=$(cut -d. -f1 <<< "$kernel_ver")
        
        echo "github_ver=$github_ver"
        echo "kernel_ver=$kernel_ver"
        echo "major_ver=$major_ver"
        echo "github_ver=$github_ver" >> $GITHUB_ENV
        echo "kernel_ver=$kernel_ver" >> $GITHUB_ENV
        echo "major_ver=$major_ver" >> $GITHUB_ENV
        [ "$github_ver" != "$kernel_ver" ] && echo "versions_status=success" >> $GITHUB_ENV

    - name: Get config
      if: ${{ env.versions_status == 'success' }}
      working-directory: /workdir
      run: |
        # 下载并解压 Debian 官方内核包
        deb_url="https://http.us.debian.org/debian/pool/main/l/linux-signed-amd64/linux-image-${kernel_ver}-cloud-amd64_${kernel_ver}-1_amd64.deb"
        wget -O linux-image.deb "$deb_url"
        
        # 提取配置文件
        ar x linux-image.deb data.tar.xz
        tar -xf data.tar.xz --wildcards '*/config-*' --strip-components=2
        mkdir -p /workdir/lib/modules
        mv config-${kernel_ver}-cloud-amd64 /workdir/lib/modules/.config
        
        # 清理临时文件
        rm -rf data.tar.xz linux-image.deb

    - name: Get Source Code
      if: ${{ env.versions_status == 'success' }}
      working-directory: /workdir
      run: |
        df -hT $PWD
        # 使用预生成的下载地址
        kernel_url="https://cdn.kernel.org/pub/linux/kernel/v${major_ver}.x/linux-${kernel_ver}.tar.xz"
        wget -O kernel.tar.xz "$kernel_url"
        tar --strip-components=1 -Jxvf kernel.tar.xz -C /workdir/linux-${kernel_ver}
        echo "code_status=success" >> $GITHUB_ENV

    - name: Compile Kernel
      if: ${{ env.versions_status == 'success' && env.code_status == 'success' }}
      working-directory: /workdir/linux-${{ env.kernel_ver }}
      run: |
        cp /workdir/lib/modules/.config .config
        echo -e "$(nproc) thread compile"
        sudo time make -j$(nproc) bindeb-pkg
        mv ../*.deb /workdir/upload
        echo "compile_status=success" >> $GITHUB_ENV
        echo "FILE_DATE=Kernel_Debian_${kernel_ver}_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Upload Artifacts
      uses: actions/upload-artifact@main
      if: ${{ env.compile_status == 'success' && env.UPLOAD_DIR == 'true' }}
      with:
        name: ${{ env.FILE_DATE }}
        path: /workdir/upload

    - name: Generate release tag
      if: ${{ env.UPLOAD_RELEASE == 'true' && env.compile_status == 'success' }}
      run: |
        echo "release_tag=Debian_Kernel_${kernel_ver}_latest_bbr_$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_ENV
        touch release.txt
        echo "tag_status=success" >> $GITHUB_ENV

    - name: Upload Kernel to release
      uses: softprops/action-gh-release@v1
      if: ${{ env.tag_status == 'success' }}
      with:
        tag_name: ${{ env.release_tag }}
        body_path: release.txt
        files: /workdir/upload/*

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      if: ${{ env.tag_status == 'success' }}
      with:
        retain_days: 1
        keep_minimum_runs: 3
