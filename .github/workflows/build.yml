name: Debian Kernel Latest

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

env:
  UPLOAD_DIR: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest
    container: docker.io/qctt/kernelbuild:debian12

    steps:
    - name: Get Kernel Versions
      shell: bash
      id: versions
      run: |
        github_ver=$(curl -s 'https://api.github.com/repos/gamesofts/debian-kernel/releases/latest' | grep 'Debian_Kernel' | grep '_bbrv3_' | head -n 1 | awk -F '"' '{print $4}' | awk -F '[/]' '{print $8}' | awk -F '[_]' '{print $3}')
        kernel_ver=$(curl -s https://www.kernel.org/ | grep ' <a href="https://cdn.kernel.org/pub/linux/kernel/' | head -n 1 | awk -F '[>]' '{print $2}' | awk -F '[<]' '{print $1}')
        major_ver=$(cut -d. -f1-2 <<< "$kernel_ver")
        
        echo "github_ver=$github_ver"
        echo "kernel_ver=$kernel_ver"
        echo "major_ver=$major_ver"
        echo "github_ver=$github_ver" >> $GITHUB_ENV
        echo "kernel_ver=$kernel_ver" >> $GITHUB_ENV
        echo "major_ver=$major_ver" >> $GITHUB_ENV

    - name: Check Kernel Versions
      if: ${{ env.github_ver != env.kernel_ver }} 
      run: |
        echo "versions_status=success"
        echo "versions_status=success" >> $GITHUB_ENV

    - name: Get Compile Config
      shell: bash
      if: ${{ env.versions_status == 'success' }}
      working-directory: /workdir
      run: |
        deb_urls=(
          "https://http.us.debian.org/debian/pool/main/l/linux-signed-amd64/linux-image-${kernel_ver}-cloud-amd64_${kernel_ver}-1_amd64.deb"
          "https://http.us.debian.org/debian/pool/main/l/linux-signed-amd64/linux-image-${major_ver}-cloud-amd64_${kernel_ver}-1~exp1_amd64.deb"
          "https://http.us.debian.org/debian/pool/main/l/linux-signed-amd64/linux-image-${major_ver}-cloud-amd64_${kernel_ver}-1_amd64.deb"
        )
        for url in "${deb_urls[@]}"; do
          echo "Trying: $url"
          if wget --no-check-certificate -q --spider "$url"; then
            wget --no-check-certificate -O linux-image.deb "$url" && break
          else
            echo "Not found: $url"
          fi
        done
        if [ ! -f linux-image.deb ]; then
          echo "::error::All deb package download attempts failed"
          exit 1
        fi
        ar x linux-image.deb data.tar.xz
        tar -xf data.tar.xz --wildcards '*/config-*' --strip-components=2
        found_config=$(find . -maxdepth 1 -name "config-*-cloud-amd64" -print -quit)
        mkdir -p /workdir/lib/modules
        mv "$found_config" /workdir/lib/modules/.config
        if [ ! -f /workdir/lib/modules/.config ]; then
          echo "::error::Config file extraction failed. Searched patterns: ${config_patterns[*]}"
          exit 1
        fi
        rm -rf data.tar.xz linux-image.deb

    - name: Get Source Code
      shell: bash
      if: ${{ env.versions_status == 'success' }}
      working-directory: /workdir
      run: |
        df -hT $PWD
        kernel_url="https://cdn.kernel.org/pub/linux/kernel/v$(cut -d. -f1 <<< $kernel_ver).x/linux-${kernel_ver}.tar.xz"
        wget --no-check-certificate -O kernel.tar.xz "$kernel_url"
        tar -Jxvf kernel.tar.xz -C /workdir && cd /workdir/linux-$kernel_ver
        echo "code_status=success" >> $GITHUB_ENV
        
    - name: Add Google BBRv3
      uses: actions/checkout@v4
      with:
        repository: google/bbr
        ref: v3
        path: /workdir/linux-${{ env.kernel_ver }}

    - name: Compile Kernel
      shell: bash
      if: ${{ env.versions_status == 'success' && env.code_status == 'success' }}
      working-directory: /workdir/linux-${{ env.kernel_ver }}
      run: |
        cp /workdir/lib/modules/.config .config
        scripts/config --disable MODULE_SIG
        scripts/config --disable DEBUG_INFO
        scripts/config --disable DEBUG_INFO_BTF
        scripts/config --disable DEBUG_INFO_DWARF4
        scripts/config --disable DEBUG_INFO_DWARF5
        scripts/config --disable DEBUG_INFO_NONE
        scripts/config --disable SYSTEM_TRUSTED_KEYS
        scripts/config --disable SYSTEM_REVOCATION_KEYS
        echo -e "$(nproc) thread compile"
        sudo time make -j$(nproc) bindeb-pkg
        mv ../*.deb /workdir/upload
        echo "compile_status=success" >> $GITHUB_ENV
        echo "FILE_DATE=Kernel_Debian_${kernel_ver}_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Upload Artifacts
      uses: actions/upload-artifact@main
      if: ${{ env.compile_status == 'success' && env.UPLOAD_DIR == 'true' }}
      with:
        name: ${{ env.FILE_DATE }}
        path: /workdir/upload

    - name: Generate release tag
      if: ${{ env.UPLOAD_RELEASE == 'true' && env.compile_status == 'success' }}
      run: |
        echo "release_tag=Debian_Kernel_${kernel_ver}_bbrv3_$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_ENV
        touch release.txt
        echo "tag_status=success" >> $GITHUB_ENV

    - name: Upload Kernel to release
      uses: softprops/action-gh-release@v1
      if: ${{ env.tag_status == 'success' }}
      with:
        tag_name: ${{ env.release_tag }}
        body_path: release.txt
        files: /workdir/upload/*

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      if: ${{ env.tag_status == 'success' }}
      with:
        retain_days: 1
        keep_minimum_runs: 3
