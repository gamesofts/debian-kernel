name: Debian Kernel Latest

on:
  schedule:
   - cron: "0 0 * * *"
  workflow_dispatch:

env:
  UPLOAD_DIR: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

jobs:
  build:
    runs-on: ubuntu-latest
    container: docker.io/qctt/kernelbuild:debian12

    steps:
    - name: Get Kernel Versions
      shell: bash
      id: versions
      run: |
        github_ver=$(curl -s 'https://api.github.com/repos/gamesofts/debian-kernel/releases/latest' | grep 'Debian_Kernel' | grep '_bbrplus_' | head -n 1 | awk -F '"' '{print $4}' | awk -F '[/]' '{print $8}' | awk -F '[_]' '{print $3}')
        kernel_ver=$(curl -s https://www.kernel.org/ | grep ' <a href="https://cdn.kernel.org/pub/linux/kernel/' | head -n 1 | awk -F '[>]' '{print $2}' | awk -F '[<]' '{print $1}')
        major_ver=$(cut -d. -f1-2 <<< "$kernel_ver")
        
        echo "github_ver=$github_ver"
        echo "kernel_ver=$kernel_ver"
        echo "major_ver=$major_ver"
        echo "github_ver=$github_ver" >> $GITHUB_ENV
        echo "kernel_ver=$kernel_ver" >> $GITHUB_ENV
        echo "major_ver=$major_ver" >> $GITHUB_ENV

    - name: Check Kernel Versions
      if: ${{ env.github_ver != env.kernel_ver }} 
      run: |
        echo "versions_status=success"
        echo "versions_status=success" >> $GITHUB_ENV

    - name: Get Compile Config
      shell: bash
      if: ${{ env.versions_status == 'success' }}
      working-directory: /workdir
      run: |
        deb_url="https://http.us.debian.org/debian/pool/main/l/linux-signed-amd64/"
        echo "Fetching deb files from $deb_url"
        deb_files=$(curl -sL -k $deb_url | grep -oP 'href="\Klinux-image-[^_]+-cloud-amd64_[^_]+_amd64\.deb' || true)
        if [ -z "$deb_files" ]; then
            echo "::error::No matching deb files found on the page."
            exit 1
        fi
        latest_version=""
        latest_deb=""
        while IFS= read -r deb_file; do
            version=$(echo "$deb_file" | awk -F_ '{print $2}')
            echo "Found deb file: $deb_file, version: $version"
            if [ -z "$latest_version" ]; then
                latest_version="$version"
                latest_deb="$deb_file"
            else
                if dpkg --compare-versions "$version" gt "$latest_version"; then
                    latest_version="$version"
                    latest_deb="$deb_file"
                fi
            fi
        done <<< "$deb_files"
        if [ -z "$latest_deb" ]; then
            echo "::error::Failed to determine the latest deb package."
            exit 1
        fi
        echo "Latest deb package: $latest_deb, version: $latest_version"
        wget --no-check-certificate -O linux-image.deb "${deb_url}${latest_deb}"
        if [ ! -f linux-image.deb ]; then
            echo "::error::Failed to download deb package."
            exit 1
        fi
        ar x linux-image.deb data.tar.xz
        tar -xf data.tar.xz --wildcards '*/config-*' --strip-components=2
        found_config=$(find . -maxdepth 1 -name "config-*-cloud-amd64" -print -quit)
        mkdir -p /workdir/lib/modules
        mv "$found_config" /workdir/lib/modules/.config
        if [ ! -f /workdir/lib/modules/.config ]; then
            echo "::error::Config file extraction failed."
            exit 1
        fi
        rm -rf data.tar.xz linux-image.deb

    - name: Get Source Code
      shell: bash
      if: ${{ env.versions_status == 'success' }}
      working-directory: /workdir
      run: |
        df -hT $PWD
        kernel_url="https://cdn.kernel.org/pub/linux/kernel/v$(cut -d. -f1 <<< $kernel_ver).x/linux-${kernel_ver}.tar.xz"
        wget --no-check-certificate -O kernel.tar.xz "$kernel_url"
        tar -Jxvf kernel.tar.xz -C /workdir && cd /workdir/linux-$kernel_ver
        echo "code_status=success" >> $GITHUB_ENV
        
    - name: Apply BBR Plus
      if: ${{ env.versions_status == 'success' && env.code_status == 'success' }}
      working-directory: /workdir/linux-${{ env.kernel_ver }}
      run: |
        wget --no-check-certificate https://raw.githubusercontent.com/gamesofts/debian-kernel/main/tcp_bbr.c -O ./net/ipv4/tcp_bbr.c

    - name: Compile Kernel
      shell: bash
      if: ${{ env.versions_status == 'success' && env.code_status == 'success' }}
      working-directory: /workdir/linux-${{ env.kernel_ver }}
      run: |
        cp /workdir/lib/modules/.config .config
        scripts/config --disable DEBUG_INFO_X86
        scripts/config --disable DEBUG_INFO_VMCORE
        scripts/config --disable DEBUG_INFO_BTF_MODULES
        scripts/config --disable DEBUG_INFO_DWARF_TOOLCHAIN_DEFAULT
        scripts/config --disable DEBUG_INFO_PERF
        scripts/config --disable DEBUG_INFO_BTF
        scripts/config --disable DEBUG_INFO_DWARF4
        scripts/config --disable DEBUG_INFO_DWARF5
        scripts/config --undefine GDB_SCRIPTS
        scripts/config --undefine DEBUG_INFO
        scripts/config --undefine DEBUG_INFO_SPLIT
        scripts/config --undefine DEBUG_INFO_REDUCED
        scripts/config --undefine DEBUG_INFO_COMPRESSED
        scripts/config --set-val DEBUG_INFO_NONE y
        scripts/config --set-val CONFIG_DEBUG_INFO_NONE y

        echo -e "$(nproc) thread compile"
        make olddefconfig
        make bindeb-pkg -j $(nproc)

        mv ../*.deb /workdir/upload
        echo "compile_status=success" >> $GITHUB_ENV
        echo "FILE_DATE=Kernel_Debian_${kernel_ver}_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Upload Artifacts
      uses: actions/upload-artifact@main
      if: ${{ env.compile_status == 'success' && env.UPLOAD_DIR == 'true' }}
      with:
        name: ${{ env.FILE_DATE }}
        path: /workdir/upload

    - name: Generate release tag
      if: ${{ env.UPLOAD_RELEASE == 'true' && env.compile_status == 'success' }}
      run: |
        echo "release_tag=Debian_Kernel_${kernel_ver}_bbrplus_$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_ENV
        touch release.txt
        echo "tag_status=success" >> $GITHUB_ENV

    - name: Upload Kernel to release
      uses: softprops/action-gh-release@v1
      if: ${{ env.tag_status == 'success' }}
      with:
        tag_name: ${{ env.release_tag }}
        body_path: release.txt
        files: /workdir/upload/*

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      if: ${{ env.tag_status == 'success' }}
      with:
        retain_days: 1
        keep_minimum_runs: 3
